<?xml version="1.0" encoding="UTF-8"?>
<!-- RSS generated by oldSchool v0.5.29 on Tue, 04 Jun 2019 17:46:16 GMT -->
<rss version="2.0" xmlns:source="http://source.scripting.com/">
	<channel>
		<title>Scripting News</title>
		<link>http://scripting.com/</link>
		<description>Scripting News, the weblog started in 1994 that bootstrapped the blogging revolution. ðŸš€</description>
		<pubDate>Tue, 04 Jun 2019 17:46:39 GMT</pubDate>
		<language>en-us</language>
		<generator>oldSchool v0.5.29</generator>
		<copyright>&amp;copy; 1994-2019 &lt;a href=&quot;http://davewiner.com/&quot;&gt;Dave Winer&lt;/a&gt;.</copyright>
		<docs>http://cyber.law.harvard.edu/rss/rss.html</docs>
		<lastBuildDate>Tue, 04 Jun 2019 17:46:16 GMT</lastBuildDate>
		<cloud domain="rpc.rsscloud.io" port="5337" path="/pleaseNotify" registerProcedure="" protocol="http-post" />
		<source:account service="twitter">davewiner</source:account>
		<source:account service="facebook">dave.winer.12</source:account>
		<source:account service="github">scripting</source:account>
		<source:account service="linkedin">scripting</source:account>
		<source:localTime>Tue, June 4, 2019 1:46 PM EDT</source:localTime>
		<source:likes>http://likes.scripting.com/</source:likes>
		<item>
			<description>I wish &lt;a href=&quot;https://www.warren.senate.gov/&quot;&gt;Elizabeth Warren&lt;/a&gt; would set an example and not post her position papers &lt;a href=&quot;https://medium.com/@teamwarren/my-green-manufacturing-plan-for-america-fc0ad53ab614&quot;&gt;on a silo&lt;/a&gt;. Her archive isnâ€™t very robust since she doesnâ€™t control the domain. Pretty sure itâ€™s behind a paywall. She could set a great example of how to use an open and free web.</description>
			<pubDate>Tue, 04 Jun 2019 17:46:39 GMT</pubDate>
			<link>http://scripting.com/2019/06/04.html#a174639</link>
			<guid>http://scripting.com/2019/06/04.html#a174639</guid>
			<source:outline text="I wish &lt;a href=&quot;https://www.warren.senate.gov/&quot;&gt;Elizabeth Warren&lt;/a&gt; would set an example and not post her position papers &lt;a href=&quot;https://medium.com/@teamwarren/my-green-manufacturing-plan-for-america-fc0ad53ab614&quot;&gt;on a silo&lt;/a&gt;. Her archive isnâ€™t very robust since she doesnâ€™t control the domain. Pretty sure itâ€™s behind a paywall. She could set a great example of how to use an open and free web." created="Tue, 04 Jun 2019 17:46:39 GMT" type="outline" permalink="http://scripting.com/2019/06/04.html#a174639"/>
			</item>
		<item>
			<description>I've been working on the next &lt;a href=&quot;http://scripting.com/2014/06/02/whatIsARiverOfNewsAggregator.html&quot;&gt;River&lt;/a&gt; product. This time I'm using a MySQL database. Three tables -- feeds, items and subscriptions. The folder structure is exactly as in &lt;a href=&quot;http://scripting.com/liveblog/users/davewiner/2016/02/09/0995.html&quot;&gt;River5&lt;/a&gt;, except there is no data folder (the data is in the database). I am still a relative newbie in SQL databases, but I think this model works. I'm documenting as much as I can and of course I will release the Node.js source. I hope it serves as a basis for distributing RSS intelligence around the net. Last time around (Google Reader) we centralized. That was a mistake. If enough people run instances of this database we'll have a less interruptable base of functionality. I want to try out more new ideas as well. We've been really stuck for a long time. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ’¥&lt;/span&gt;</description>
			<pubDate>Tue, 04 Jun 2019 15:17:33 GMT</pubDate>
			<link>http://scripting.com/2019/06/04.html#a151733</link>
			<guid>http://scripting.com/2019/06/04.html#a151733</guid>
			<source:outline text="I've been working on the next &lt;a href=&quot;http://scripting.com/2014/06/02/whatIsARiverOfNewsAggregator.html&quot;&gt;River&lt;/a&gt; product. This time I'm using a MySQL database. Three tables -- feeds, items and subscriptions. The folder structure is exactly as in &lt;a href=&quot;http://scripting.com/liveblog/users/davewiner/2016/02/09/0995.html&quot;&gt;River5&lt;/a&gt;, except there is no data folder (the data is in the database). I am still a relative newbie in SQL databases, but I think this model works. I'm documenting as much as I can and of course I will release the Node.js source. I hope it serves as a basis for distributing RSS intelligence around the net. Last time around (Google Reader) we centralized. That was a mistake. If enough people run instances of this database we'll have a less interruptable base of functionality. I want to try out more new ideas as well. We've been really stuck for a long time. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ’¥&lt;/span&gt;" created="Tue, 04 Jun 2019 15:17:33 GMT" type="outline" image="http://scripting.com/2016/02/09/loveRssTShirt.png" permalink="http://scripting.com/2019/06/04.html#a151733"/>
			</item>
		<item>
			<description>The Guardian Books &lt;a href=&quot;http://xmlviewer.scripting.com/?url=http://www.theguardian.com/books/series/books/rss&quot;&gt;podcast&lt;/a&gt; doesn't use enclosures. Come on, make it easy for podcast players folks. Use the &amp;lt;enclosure&gt; element, and set the type and length correctly.</description>
			<pubDate>Tue, 04 Jun 2019 14:37:34 GMT</pubDate>
			<link>http://scripting.com/2019/06/04.html#a143734</link>
			<guid>http://scripting.com/2019/06/04.html#a143734</guid>
			<source:outline text="The Guardian Books &lt;a href=&quot;http://xmlviewer.scripting.com/?url=http://www.theguardian.com/books/series/books/rss&quot;&gt;podcast&lt;/a&gt; doesn't use enclosures. Come on, make it easy for podcast players folks. Use the &amp;lt;enclosure&gt; element, and set the type and length correctly." created="Tue, 04 Jun 2019 14:37:34 GMT" type="outline" permalink="http://scripting.com/2019/06/04.html#a143734"/>
			</item>
		<item>
			<description>&lt;a href=&quot;https://github.com/scripting/Scripting-News/issues/118&quot;&gt;Braintrust query&lt;/a&gt;: I have a Node server app that's behaving badly, on an intermittent basis. I finally tracked down what's going wrong, but it's a mystery. I also have an easy workaround, but before I do that, I'd like to see if anyone has an idea what might be going on.</description>
			<pubDate>Mon, 03 Jun 2019 16:33:03 GMT</pubDate>
			<link>http://scripting.com/2019/06/03.html#a163303</link>
			<guid>http://scripting.com/2019/06/03.html#a163303</guid>
			<source:outline text="&lt;a href=&quot;https://github.com/scripting/Scripting-News/issues/118&quot;&gt;Braintrust query&lt;/a&gt;: I have a Node server app that's behaving badly, on an intermittent basis. I finally tracked down what's going wrong, but it's a mystery. I also have an easy workaround, but before I do that, I'd like to see if anyone has an idea what might be going on." created="Mon, 03 Jun 2019 16:33:03 GMT" type="outline" image="http://scripting.com/images/2019/06/03/tinaTheBearNurseFromBojackHorseman.png" permalink="http://scripting.com/2019/06/03.html#a163303"/>
			</item>
		<item>
			<description>This is a test &lt;a href=&quot;http://scripting.com/2019/05/21/fireEveryWeaponAtOnce.m4a&quot;&gt;podcast&lt;/a&gt;.</description>
			<pubDate>Mon, 03 Jun 2019 15:13:40 GMT</pubDate>
			<link>http://scripting.com/2019/06/03.html#a151340</link>
			<guid>http://scripting.com/2019/06/03.html#a151340</guid>
			<enclosure url="http://scripting.com/2019/05/21/fireEveryWeaponAtOnce.m4a" type="audio/mpeg" length="4160608"/>
			<source:outline text="This is a test &lt;a href=&quot;http://scripting.com/2019/05/21/fireEveryWeaponAtOnce.m4a&quot;&gt;podcast&lt;/a&gt;." created="Mon, 03 Jun 2019 15:13:40 GMT" type="outline" enclosure="http://scripting.com/2019/05/21/fireEveryWeaponAtOnce.m4a" enclosureType="audio/mpeg" enclosureLength="4160608" permalink="http://scripting.com/2019/06/03.html#a151340"/>
			</item>
		<item>
			<description>If journalism had the ability to look at itself critically, the way it looks at Facebook, they would find a smoking gun in this &lt;a href=&quot;https://www.hollywoodreporter.com/news/leslie-moonves-donald-trump-may-871464&quot;&gt;Les Moonves quote&lt;/a&gt; from 2016. You could argue whether Facebook knew it was profiting from Trump trolling, but there's absolutely no doubt that journalism was. We need a Mueller report on this too. Any journalism outfit could do it, btw. They have access to all the sources. There should be a Pulitzer in it. But of course none of them will do it. it would require an integrity they don't have.</description>
			<pubDate>Mon, 03 Jun 2019 14:38:29 GMT</pubDate>
			<link>http://scripting.com/2019/06/03.html#a143829</link>
			<guid>http://scripting.com/2019/06/03.html#a143829</guid>
			<source:outline text="If journalism had the ability to look at itself critically, the way it looks at Facebook, they would find a smoking gun in this &lt;a href=&quot;https://www.hollywoodreporter.com/news/leslie-moonves-donald-trump-may-871464&quot;&gt;Les Moonves quote&lt;/a&gt; from 2016. You could argue whether Facebook knew it was profiting from Trump trolling, but there's absolutely no doubt that journalism was. We need a Mueller report on this too. Any journalism outfit could do it, btw. They have access to all the sources. There should be a Pulitzer in it. But of course none of them will do it. it would require an integrity they don't have." created="Mon, 03 Jun 2019 14:38:29 GMT" type="outline" permalink="http://scripting.com/2019/06/03.html#a143829"/>
			</item>
		<item>
			<description>Disclaimer: I hate platitudes.</description>
			<pubDate>Mon, 03 Jun 2019 03:34:56 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a033456</link>
			<guid>http://scripting.com/2019/06/02.html#a033456</guid>
			<source:outline text="Disclaimer: I hate platitudes." created="Mon, 03 Jun 2019 03:34:56 GMT" type="outline" permalink="http://scripting.com/2019/06/02.html#a033456"/>
			</item>
		<item>
			<description>What happened in Game 2 of the NBA finals? It was pretty evenly matched. Both teams were real strong on defense. Golden State found its groove at the beginning of the 3rd quarter, and the Raptors went cold. They got good looks but didn't make them.</description>
			<pubDate>Mon, 03 Jun 2019 03:12:29 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a031229</link>
			<guid>http://scripting.com/2019/06/02.html#a031229</guid>
			<source:outline text="What happened in Game 2 of the NBA finals? It was pretty evenly matched. Both teams were real strong on defense. Golden State found its groove at the beginning of the 3rd quarter, and the Raptors went cold. They got good looks but didn't make them." created="Mon, 03 Jun 2019 03:12:29 GMT" type="tweet" tweetId="1135384269575139334" tweetUserName="davewiner" permalink="http://scripting.com/2019/06/02.html#a031229"/>
			</item>
		<item>
			<description>Cori's smoothie &lt;a href=&quot;http://scripting.com/images/2019/06/02/coriSmoothieRecipe.png&quot;&gt;recipe&lt;/a&gt;.</description>
			<pubDate>Sun, 02 Jun 2019 19:40:23 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a194023</link>
			<guid>http://scripting.com/2019/06/02.html#a194023</guid>
			<source:outline text="Cori's smoothie &lt;a href=&quot;http://scripting.com/images/2019/06/02/coriSmoothieRecipe.png&quot;&gt;recipe&lt;/a&gt;." created="Sun, 02 Jun 2019 19:40:23 GMT" type="outline" permalink="http://scripting.com/2019/06/02.html#a194023"/>
			</item>
		<item>
			<description>Bob Stepno recommends watching &lt;a href=&quot;https://www.youtube.com/watch?v=KBJpViMypKY&quot;&gt;Meet John Doe&lt;/a&gt;.</description>
			<pubDate>Sun, 02 Jun 2019 19:43:17 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a194317</link>
			<guid>http://scripting.com/2019/06/02.html#a194317</guid>
			<source:outline text="Bob Stepno recommends watching &lt;a href=&quot;https://www.youtube.com/watch?v=KBJpViMypKY&quot;&gt;Meet John Doe&lt;/a&gt;." created="Sun, 02 Jun 2019 19:43:17 GMT" type="outline" urlvideo="https://www.youtube.com/watch?v=KBJpViMypKY" permalink="http://scripting.com/2019/06/02.html#a194317"/>
			</item>
		<item>
			<description>How does Alexa know what my favorite &lt;a href=&quot;https://www.youtube.com/watch?v=6HDdiz8MU8o&quot;&gt;Rolling Stones song&lt;/a&gt; is?</description>
			<pubDate>Sun, 02 Jun 2019 16:11:19 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a161119</link>
			<guid>http://scripting.com/2019/06/02.html#a161119</guid>
			<source:outline text="How does Alexa know what my favorite &lt;a href=&quot;https://www.youtube.com/watch?v=6HDdiz8MU8o&quot;&gt;Rolling Stones song&lt;/a&gt; is?" created="Sun, 02 Jun 2019 16:11:19 GMT" type="outline" urlvideo="https://www.youtube.com/watch?v=6HDdiz8MU8o" permalink="http://scripting.com/2019/06/02.html#a161119"/>
			</item>
		<item>
			<description>Every reminder about Father's Day on the net, supposedly directed right at me, are total triggers of grief and regret. You'd think with all their sophisticated data mining they would know what this isn't a holiday I want to hear about.</description>
			<pubDate>Sun, 02 Jun 2019 16:06:09 GMT</pubDate>
			<link>http://scripting.com/2019/06/02.html#a160609</link>
			<guid>http://scripting.com/2019/06/02.html#a160609</guid>
			<source:outline text="Every reminder about Father's Day on the net, supposedly directed right at me, are total triggers of grief and regret. You'd think with all their sophisticated data mining they would know what this isn't a holiday I want to hear about." created="Sun, 02 Jun 2019 16:06:09 GMT" type="outline" permalink="http://scripting.com/2019/06/02.html#a160609"/>
			</item>
		<item>
			<title>How Old School works</title>
			<description>&lt;p&gt;My longtime friend Stan Krute sent an email asking how I do my blog. Rather than do a one-off email, I am going to explain it via blog post, so it's documented publicly.&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;In the spring of 2017, I wrote a piece of software called &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog&quot;&gt;Old School&lt;/a&gt;. It's a Node.js server app that is configured via a big JSON file. It handles incoming REST-style messages telling it to build blogs that it knows about via the JSON file. &lt;/li&gt;&#10;&lt;li&gt;I write the blog content with an outliner, and the result is a big OPML file. The server software (Old School) knows where to look for the OPML file, via the config.json file. You can use any outliner to edit the content as long as it produces an OPML file as output. &lt;/li&gt;&#10;&lt;li&gt;I archive the content of the blog in a &lt;a href=&quot;https://github.com/scripting/Scripting-News/tree/master/blog&quot;&gt;GitHub repository&lt;/a&gt;, so you can see how the content works, going back to May 2017. &lt;/li&gt;&#10;&lt;li&gt;The &amp;lt;head&gt; elements of the OPML file also configure Old School and it contains information other applications might find useful. &lt;/li&gt;&#10;&lt;li&gt;Here's a &lt;a href=&quot;https://duckduckgo.com/?q=site%3Ascripting.com+%22old+school%22&amp;t=h_&amp;ia=web&quot;&gt;search&lt;/a&gt; for Old School on my blog. &lt;/li&gt;&#10;&lt;li&gt;Even though Old School is undocumented and unsupported, I did provide an &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog/tree/master/examples/helloworld&quot;&gt;example app&lt;/a&gt;. Never know when I will need to install a second instance.&lt;/li&gt;&#10;&lt;li&gt;The outliner I use is called Electric Outliner. I've never shipped it, and don't have any plans to. I got tired of supporting &quot;products&quot; that few if any people use. This, and Old School were the first two products I made just for myself. It's cool, because the users of the product really respect &lt;i&gt;the hell&lt;/i&gt; out of the developer, and the developer knows the users will understand the software even with no docs. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ˜„&lt;/span&gt;&lt;/li&gt;&#10;&lt;li&gt;You can use &lt;a href=&quot;http://littleoutliner.com/&quot;&gt;LO2&lt;/a&gt; -- it's very similar to EO, in fact the core outliner is the same code. &lt;/li&gt;&#10;&lt;li&gt;If I want to attach a video to a post, I add an attribute called &lt;i&gt;urlvideo, &lt;/i&gt;which points to a YouTube file. The runtime of the blog, a browser-based JavaScript app, looks for these attributes when the page is loaded, and builds the necessary structures. &lt;/li&gt;&#10;&lt;li&gt;Similarly for &lt;i&gt;urltweet, &lt;/i&gt;which points to a tweet. &lt;/li&gt;&#10;&lt;li&gt;If you put an attribute named &lt;i&gt;flNumberedSubs&lt;/i&gt; on a headline, Old School generates an &amp;lt;ol&gt; element. &lt;i&gt;flBulletedSubs&lt;/i&gt; generates an &amp;lt;ul&gt; element.&lt;/li&gt;&#10;&lt;li&gt;If you put an attribute named &lt;i&gt;image&lt;/i&gt; on an element, its value should be the address of an image, i.e. something that can be put in the src attribute of an &amp;lt;img&gt; element. Old School adds it to the output with a CSS style of float: right. That's how I create right-margin images that I love so much. &lt;/li&gt;&#10;&lt;li&gt;That reminds me, you can use emoji &lt;a href=&quot;https://www.webfx.com/tools/emoji-cheat-sheet/&quot;&gt;short codes&lt;/a&gt;. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ’¥&lt;/span&gt; &lt;/li&gt;&#10;&lt;li&gt;Old School also supports a glossary, a CMS idea that goes back to &lt;a href=&quot;http://scripting.com/clay/whatisclaybasket.html&quot;&gt;Clay Basket&lt;/a&gt; in &lt;a href=&quot;http://scripting.com/clay/claydataglossary.html&quot;&gt;1996&lt;/a&gt;. It's a simple two-column table represented in an outline. It does string substitutions of the top-level string with its sub-head's value. The glossary I use for Scripting News is also &lt;a href=&quot;https://github.com/scripting/Scripting-News/blob/master/blog/misc/glossary.opml&quot;&gt;archived&lt;/a&gt; in the repo. &lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt;If you have questions about this, post a comment in this &lt;a href=&quot;https://github.com/scripting/Scripting-News/issues/117&quot;&gt;GitHub thread&lt;/a&gt;. &lt;/p&gt;&#10;</description>
			<pubDate>Sun, 02 Jun 2019 15:04:11 GMT</pubDate>
			<link>http://scripting.com/2019/06/02/150411.html</link>
			<guid>http://scripting.com/2019/06/02/150411.html</guid>
			<source:outline text="How Old School works" created="Sun, 02 Jun 2019 15:04:11 GMT" type="outline" subs="[object Object],[object Object]" permalink="http://scripting.com/2019/06/02/150411.html">
				<source:outline text="My longtime friend Stan Krute sent an email asking how I do my blog. Rather than do a one-off email, I am going to explain it via blog post, so it's documented publicly." created="Sun, 02 Jun 2019 15:04:17 GMT" flNumberedSubs="true" subs="[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]" permalink="http://scripting.com/2019/06/02/150411.html#a150417">
					<source:outline text="In the spring of 2017, I wrote a piece of software called &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog&quot;&gt;Old School&lt;/a&gt;. It's a Node.js server app that is configured via a big JSON file. It handles incoming REST-style messages telling it to build blogs that it knows about via the JSON file." created="Sun, 02 Jun 2019 15:05:35 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a150535"/>
					<source:outline text="I write the blog content with an outliner, and the result is a big OPML file. The server software (Old School) knows where to look for the OPML file, via the config.json file. You can use any outliner to edit the content as long as it produces an OPML file as output." created="Sun, 02 Jun 2019 15:06:36 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a150636"/>
					<source:outline text="I archive the content of the blog in a &lt;a href=&quot;https://github.com/scripting/Scripting-News/tree/master/blog&quot;&gt;GitHub repository&lt;/a&gt;, so you can see how the content works, going back to May 2017." created="Sun, 02 Jun 2019 15:09:57 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a150957"/>
					<source:outline text="The &amp;lt;head&gt; elements of the OPML file also configure Old School and it contains information other applications might find useful." created="Sun, 02 Jun 2019 15:26:45 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a152645"/>
					<source:outline text="Here's a &lt;a href=&quot;https://duckduckgo.com/?q=site%3Ascripting.com+%22old+school%22&amp;t=h_&amp;ia=web&quot;&gt;search&lt;/a&gt; for Old School on my blog." created="Sun, 02 Jun 2019 15:32:10 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a153210"/>
					<source:outline text="Even though Old School is undocumented and unsupported, I did provide an &lt;a href=&quot;https://github.com/scripting/oldSchoolBlog/tree/master/examples/helloworld&quot;&gt;example app&lt;/a&gt;. Never know when I will need to install a second instance." created="Sun, 02 Jun 2019 15:34:06 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a153406"/>
					<source:outline text="The outliner I use is called Electric Outliner. I've never shipped it, and don't have any plans to. I got tired of supporting &quot;products&quot; that few if any people use. This, and Old School were the first two products I made just for myself. It's cool, because the users of the product really respect &lt;i&gt;the hell&lt;/i&gt; out of the developer, and the developer knows the users will understand the software even with no docs. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ˜„&lt;/span&gt;" created="Sun, 02 Jun 2019 15:27:30 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a152730"/>
					<source:outline text="You can use &lt;a href=&quot;http://littleoutliner.com/&quot;&gt;LO2&lt;/a&gt; -- it's very similar to EO, in fact the core outliner is the same code." created="Sun, 02 Jun 2019 15:28:49 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a152849"/>
					<source:outline text="If I want to attach a video to a post, I add an attribute called &lt;i&gt;urlvideo, &lt;/i&gt;which points to a YouTube file. The runtime of the blog, a browser-based JavaScript app, looks for these attributes when the page is loaded, and builds the necessary structures." created="Sun, 02 Jun 2019 15:08:25 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a150825"/>
					<source:outline text="Similarly for &lt;i&gt;urltweet, &lt;/i&gt;which points to a tweet." created="Sun, 02 Jun 2019 15:09:47 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a150947"/>
					<source:outline text="If you put an attribute named &lt;i&gt;flNumberedSubs&lt;/i&gt; on a headline, Old School generates an &amp;lt;ol&gt; element. &lt;i&gt;flBulletedSubs&lt;/i&gt; generates an &amp;lt;ul&gt; element." created="Sun, 02 Jun 2019 15:11:20 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a151120"/>
					<source:outline text="If you put an attribute named &lt;i&gt;image&lt;/i&gt; on an element, its value should be the address of an image, i.e. something that can be put in the src attribute of an &amp;lt;img&gt; element. Old School adds it to the output with a CSS style of float: right. That's how I create right-margin images that I love so much." created="Sun, 02 Jun 2019 15:12:16 GMT" image="http://scripting.com/images/2017/07/21/trumpHead.png" permalink="http://scripting.com/2019/06/02/150411.html#a151216"/>
					<source:outline text="That reminds me, you can use emoji &lt;a href=&quot;https://www.webfx.com/tools/emoji-cheat-sheet/&quot;&gt;short codes&lt;/a&gt;. &lt;span class=&quot;spOldSchoolEmoji&quot;&gt;ðŸ’¥&lt;/span&gt;" created="Sun, 02 Jun 2019 15:14:23 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a151423"/>
					<source:outline text="Old School also supports a glossary, a CMS idea that goes back to &lt;a href=&quot;http://scripting.com/clay/whatisclaybasket.html&quot;&gt;Clay Basket&lt;/a&gt; in &lt;a href=&quot;http://scripting.com/clay/claydataglossary.html&quot;&gt;1996&lt;/a&gt;. It's a simple two-column table represented in an outline. It does string substitutions of the top-level string with its sub-head's value. The glossary I use for Scripting News is also &lt;a href=&quot;https://github.com/scripting/Scripting-News/blob/master/blog/misc/glossary.opml&quot;&gt;archived&lt;/a&gt; in the repo." created="Sun, 02 Jun 2019 15:15:40 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a151540"/>
					</source:outline>
				<source:outline text="If you have questions about this, post a comment in this &lt;a href=&quot;https://github.com/scripting/Scripting-News/issues/117&quot;&gt;GitHub thread&lt;/a&gt;." created="Sun, 02 Jun 2019 15:10:28 GMT" permalink="http://scripting.com/2019/06/02/150411.html#a151028"/>
				</source:outline>
			</item>
		<item>
			<description>The main reason Trump &lt;a href=&quot;https://twitter.com/davewiner/status/1134859265972285442&quot;&gt;needs&lt;/a&gt; to be impeached is he's ignoring laws, breaking them, openly.</description>
			<pubDate>Sat, 01 Jun 2019 16:35:40 GMT</pubDate>
			<link>http://scripting.com/2019/06/01.html#a163540</link>
			<guid>http://scripting.com/2019/06/01.html#a163540</guid>
			<source:outline text="The main reason Trump &lt;a href=&quot;https://twitter.com/davewiner/status/1134859265972285442&quot;&gt;needs&lt;/a&gt; to be impeached is he's ignoring laws, breaking them, openly." created="Sat, 01 Jun 2019 16:35:40 GMT" type="outline" urltweet="https://twitter.com/davewiner/status/1134859265972285442" permalink="http://scripting.com/2019/06/01.html#a163540"/>
			</item>
		</channel>
	</rss>
